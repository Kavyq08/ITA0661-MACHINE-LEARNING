import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_boston
from sklearn.metrics import mean_squared_error

class LinearRegression:
    def __init__(self, learning_rate=0.01, epochs=1000):
        self.learning_rate = learning_rate
        self.epochs = epochs
        self.weights = None
        self.bias = None

    def fit(self, X_train, y_train):
        m, n = X_train.shape
        self.weights = np.zeros(n)
        self.bias = 0

        for _ in range(self.epochs):
            model = np.dot(X_train, self.weights) + self.bias
            predictions = model
            dw = (1 / m) * np.dot(X_train.T, (predictions - y_train))
            db = (1 / m) * np.sum(predictions - y_train)
            self.weights -= self.learning_rate * dw
            self.bias -= self.learning_rate * db

    def predict(self, X_test):
        return np.dot(X_test, self.weights) + self.bias

data = load_boston()
X = data.data
y = data.target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

lr = LinearRegression(learning_rate=0.01, epochs=1000)
lr.fit(X_train, y_train)
y_pred = lr.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")
